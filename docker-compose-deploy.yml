version: '3.8'

services:
  nginx-example:
    image: nginx:latest
    container_name: nginx-example
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network
    depends_on:
      - frontend
    restart: always

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    ports:
      - "9113:9113"
    command: --nginx.scrape-uri=http://nginx-example:80/stub_status
    depends_on:
      - nginx-example
    networks:
      - app-network

  prometheus-example:
    image: prom/prometheus:v2.45.6
    container_name: prometheus-example
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.8.1
    container_name: node_exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - app-network 

  cadvisor-example:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor-example
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-network

  grafana-example:
    image: grafana/grafana:9.5.20
    container_name: grafana-example
    volumes:
      - ./grafana:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - app-network

  fastapi:
    image: ryanleetecheer/backend-test:1.0.8
    container_name: fastapi
    restart: always
    ports:
      - '8000:8000'
    networks:
      - app-network
  
  express:
    container_name: express
    build: 
      context: ./node-backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3001:3001'
    networks:
      - app-network
    depends_on:
      - db
  
  django:
    container_name: django
    build: 
      context: ./django-backend
      dockerfile: Dockerfile
    restart: always
    ports:
      - '8002:8002'
    networks:
      - app-network
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8002"
    depends_on:
      - db

  frontend:
    image: ryanleetecheer/frontend-test:1.0.2
    container_name: frontend
    ports:
      - "5173:5173"
    command: yarn dev --host
    restart: always
    networks:
      - app-network
  
  db:
    image: mysql:latest
    container_name: db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: session_db
      MYSQL_USER: session_example
      MYSQL_PASSWORD: session_example
    ports:
      - '3306:3306'
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network
  
  mysql-exporter:
    image: prom/mysqld-exporter:main
    container_name: mysql-exporter
    ports:
      - "9104:9104"
    volumes:
      - ./mysql-exporter/my-config.conf:/cfg/my-config.conf
    environment:
      - DATA_SOURCE_NAME='root:root@(db:3306)/session_db'
      - collect.info_schema.tablestats=true
      - collect.info_schema.userstats=true
      - collect.info_schema.query_response_time=true
      - collect.auto_increment.columns=true
      - collect.binlog_size=true
      - collect.perf_schema.eventsstatements=true
      - collect.perf_schema.eventswaits=true
      - collect.perf_schema.file_events=true
      - collect.perf_schema.indexiowaits=true
      - collect.perf_schema.tableiowaits=true
      - collect.perf_schema.tablelocks=true
    networks:
      - app-network
    depends_on:
      - db
    command:
      - '--config.my-cnf=/cfg/my-config.conf'
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    links:
      - db:mysql
    ports:
      - "8001:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: root
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
